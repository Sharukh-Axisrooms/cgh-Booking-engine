{"ast":null,"code":"import _asyncToGenerator from \"/home/klouud-dev/Documents/Axisroom/cgh-Booking-engine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { forkJoin } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { BASE_URL, BOOKING_ENGINE_ID, getDefaultHeaders } from '../shared/constants/url.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SearchService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  getHotels(params) {\n    return this.http.get(`${BASE_URL}api/be/search`, {\n      params: params,\n      headers: getDefaultHeaders()\n    });\n  }\n\n  getRooms(params) {\n    return this.http.get(`${BASE_URL}api/be/rooms`, {\n      params: params,\n      headers: getDefaultHeaders()\n    });\n  }\n\n  getRoomsImages(roomId, hotelId) {\n    return this.http.get(`https://app.axisrooms.com/support/addRoomV2.html?roomId=` + roomId + `&productId=` + hotelId, {\n      // params: params,\n      headers: getDefaultHeaders()\n    });\n  }\n\n  searchRooms(params) {\n    return this.getHotels(params).pipe(mergeMap(data => this.getRoomData(data)));\n  }\n\n  getRoomData(data) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      let roomObservables = (_a = data['Hotel_Details']) === null || _a === void 0 ? void 0 : _a.map(e => {\n        let params = {};\n        params['bookingEngineId'] = BOOKING_ENGINE_ID;\n        params['searchId'] = data['search_id'];\n        params['productId'] = e.hotel_id;\n        return _this.getRooms(params).pipe(map(roomData => {\n          var _a;\n\n          for (let i = 0; i < ((_a = data['Hotel_Details']) === null || _a === void 0 ? void 0 : _a.length); i++) {\n            if (roomData['HotelDetails'][0]['hotelId'] === data['Hotel_Details'][i]['hotel_id']) {\n              data['Hotel_Details'][i]['rooms'] = roomData['HotelDetails'][0]['rooms'];\n              break;\n            }\n          }\n        }));\n      });\n\n      if (roomObservables) {\n        yield forkJoin(roomObservables).toPromise();\n        data['Hotel_Details'] = data['Hotel_Details'].filter(e => e['rooms'] != undefined);\n      }\n\n      return data;\n    })();\n  }\n\n  getAllHotels() {\n    return this.http.get(`${BASE_URL}api/be/search`, {\n      params: {\n        bookingEngineId: BOOKING_ENGINE_ID\n      },\n      headers: getDefaultHeaders()\n    });\n  }\n\n}\n\nSearchService.ɵfac = function SearchService_Factory(t) {\n  return new (t || SearchService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nSearchService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SearchService,\n  factory: SearchService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/klouud-dev/Documents/Axisroom/cgh-Booking-engine/src/app/services/search.service.ts"],"names":["forkJoin","map","mergeMap","BASE_URL","BOOKING_ENGINE_ID","getDefaultHeaders","i0","i1","SearchService","constructor","http","getHotels","params","get","headers","getRooms","getRoomsImages","roomId","hotelId","searchRooms","pipe","data","getRoomData","_a","roomObservables","e","hotel_id","roomData","i","length","toPromise","filter","undefined","getAllHotels","bookingEngineId","ɵfac","SearchService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,QAAT,QAAyB,MAAzB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,QAAT,EAAmBC,iBAAnB,EAAsCC,iBAAtC,QAAgE,mCAAhE;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AACDC,EAAAA,SAAS,CAACC,MAAD,EAAS;AACd,WAAO,KAAKF,IAAL,CAAUG,GAAV,CAAe,GAAEV,QAAS,eAA1B,EAA0C;AAC7CS,MAAAA,MAAM,EAAEA,MADqC;AAE7CE,MAAAA,OAAO,EAAET,iBAAiB;AAFmB,KAA1C,CAAP;AAIH;;AACDU,EAAAA,QAAQ,CAACH,MAAD,EAAS;AACb,WAAO,KAAKF,IAAL,CAAUG,GAAV,CAAe,GAAEV,QAAS,cAA1B,EAAyC;AAC5CS,MAAAA,MAAM,EAAEA,MADoC;AAE5CE,MAAAA,OAAO,EAAET,iBAAiB;AAFkB,KAAzC,CAAP;AAIH;;AACDW,EAAAA,cAAc,CAACC,MAAD,EAASC,OAAT,EAAkB;AAC5B,WAAO,KAAKR,IAAL,CAAUG,GAAV,CAAe,0DAAD,GAA6DI,MAA7D,GAAuE,aAAvE,GAAsFC,OAApG,EAA6G;AAChH;AACAJ,MAAAA,OAAO,EAAET,iBAAiB;AAFsF,KAA7G,CAAP;AAIH;;AACDc,EAAAA,WAAW,CAACP,MAAD,EAAS;AAChB,WAAO,KAAKD,SAAL,CAAeC,MAAf,EAAuBQ,IAAvB,CAA4BlB,QAAQ,CAAEmB,IAAD,IAAU,KAAKC,WAAL,CAAiBD,IAAjB,CAAX,CAApC,CAAP;AACH;;AACKC,EAAAA,WAAW,CAACD,IAAD,EAAO;AAAA;;AAAA;AACpB,UAAIE,EAAJ;;AACA,UAAIC,eAAe,GAAG,CAACD,EAAE,GAAGF,IAAI,CAAC,eAAD,CAAV,MAAiC,IAAjC,IAAyCE,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAACtB,GAAH,CAAQwB,CAAD,IAAO;AAClG,YAAIb,MAAM,GAAG,EAAb;AACAA,QAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4BR,iBAA5B;AACAQ,QAAAA,MAAM,CAAC,UAAD,CAAN,GAAqBS,IAAI,CAAC,WAAD,CAAzB;AACAT,QAAAA,MAAM,CAAC,WAAD,CAAN,GAAsBa,CAAC,CAACC,QAAxB;AACA,eAAO,KAAI,CAACX,QAAL,CAAcH,MAAd,EAAsBQ,IAAtB,CAA2BnB,GAAG,CAAE0B,QAAD,IAAc;AAChD,cAAIJ,EAAJ;;AACA,eAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAACL,EAAE,GAAGF,IAAI,CAAC,eAAD,CAAV,MAAiC,IAAjC,IAAyCE,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAACM,MAAzE,CAAjB,EAAmGD,CAAC,EAApG,EAAwG;AACpG,gBAAID,QAAQ,CAAC,cAAD,CAAR,CAAyB,CAAzB,EAA4B,SAA5B,MACAN,IAAI,CAAC,eAAD,CAAJ,CAAsBO,CAAtB,EAAyB,UAAzB,CADJ,EAC0C;AACtCP,cAAAA,IAAI,CAAC,eAAD,CAAJ,CAAsBO,CAAtB,EAAyB,OAAzB,IACID,QAAQ,CAAC,cAAD,CAAR,CAAyB,CAAzB,EAA4B,OAA5B,CADJ;AAEA;AACH;AACJ;AACJ,SAVoC,CAA9B,CAAP;AAWH,OAhBuF,CAAxF;;AAiBA,UAAIH,eAAJ,EAAqB;AACjB,cAAMxB,QAAQ,CAACwB,eAAD,CAAR,CAA0BM,SAA1B,EAAN;AACAT,QAAAA,IAAI,CAAC,eAAD,CAAJ,GAAwBA,IAAI,CAAC,eAAD,CAAJ,CAAsBU,MAAtB,CAA8BN,CAAD,IAAOA,CAAC,CAAC,OAAD,CAAD,IAAcO,SAAlD,CAAxB;AACH;;AACD,aAAOX,IAAP;AAvBoB;AAwBvB;;AACDY,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKvB,IAAL,CAAUG,GAAV,CAAe,GAAEV,QAAS,eAA1B,EAA0C;AAC7CS,MAAAA,MAAM,EAAE;AAAEsB,QAAAA,eAAe,EAAE9B;AAAnB,OADqC;AAE7CU,MAAAA,OAAO,EAAET,iBAAiB;AAFmB,KAA1C,CAAP;AAIH;;AAvDsB;;AAyD3BG,aAAa,CAAC2B,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAI7B,aAAV,EAAyBF,EAAE,CAACgC,QAAH,CAAY/B,EAAE,CAACgC,UAAf,CAAzB,CAAP;AAA8D,CAAvH;;AACA/B,aAAa,CAACgC,KAAd,GAAsB,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElC,aAAT;AAAwBmC,EAAAA,OAAO,EAAEnC,aAAa,CAAC2B,IAA/C;AAAqDS,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import { forkJoin } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { BASE_URL, BOOKING_ENGINE_ID, getDefaultHeaders, } from '../shared/constants/url.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SearchService {\n    constructor(http) {\n        this.http = http;\n    }\n    getHotels(params) {\n        return this.http.get(`${BASE_URL}api/be/search`, {\n            params: params,\n            headers: getDefaultHeaders(),\n        });\n    }\n    getRooms(params) {\n        return this.http.get(`${BASE_URL}api/be/rooms`, {\n            params: params,\n            headers: getDefaultHeaders(),\n        });\n    }\n    getRoomsImages(roomId, hotelId) {\n        return this.http.get(`https://app.axisrooms.com/support/addRoomV2.html?roomId=` + roomId + `&productId=` + hotelId, {\n            // params: params,\n            headers: getDefaultHeaders(),\n        });\n    }\n    searchRooms(params) {\n        return this.getHotels(params).pipe(mergeMap((data) => this.getRoomData(data)));\n    }\n    async getRoomData(data) {\n        var _a;\n        let roomObservables = (_a = data['Hotel_Details']) === null || _a === void 0 ? void 0 : _a.map((e) => {\n            let params = {};\n            params['bookingEngineId'] = BOOKING_ENGINE_ID;\n            params['searchId'] = data['search_id'];\n            params['productId'] = e.hotel_id;\n            return this.getRooms(params).pipe(map((roomData) => {\n                var _a;\n                for (let i = 0; i < ((_a = data['Hotel_Details']) === null || _a === void 0 ? void 0 : _a.length); i++) {\n                    if (roomData['HotelDetails'][0]['hotelId'] ===\n                        data['Hotel_Details'][i]['hotel_id']) {\n                        data['Hotel_Details'][i]['rooms'] =\n                            roomData['HotelDetails'][0]['rooms'];\n                        break;\n                    }\n                }\n            }));\n        });\n        if (roomObservables) {\n            await forkJoin(roomObservables).toPromise();\n            data['Hotel_Details'] = data['Hotel_Details'].filter((e) => e['rooms'] != undefined);\n        }\n        return data;\n    }\n    getAllHotels() {\n        return this.http.get(`${BASE_URL}api/be/search`, {\n            params: { bookingEngineId: BOOKING_ENGINE_ID },\n            headers: getDefaultHeaders(),\n        });\n    }\n}\nSearchService.ɵfac = function SearchService_Factory(t) { return new (t || SearchService)(i0.ɵɵinject(i1.HttpClient)); };\nSearchService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SearchService, factory: SearchService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}