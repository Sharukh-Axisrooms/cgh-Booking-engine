{"ast":null,"code":"import { map, tap } from 'rxjs/operators';\nimport { BASE_URL, BOOKING_ENGINE_ID, getDefaultHeaders } from '../shared/constants/url.constants';\nimport * as moment from 'moment';\nimport { cloneDeep } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./reflector\";\nimport * as i3 from \"@angular/router\";\nexport let BookingService = /*#__PURE__*/(() => {\n  class BookingService {\n    constructor(http, bookingCartReflect, router) {\n      this.http = http;\n      this.bookingCartReflect = bookingCartReflect;\n      this.router = router;\n      this.bookingCartValue = {\n        bookingItems: []\n      };\n      this.bookingCart$ = this.bookingCartReflect.observe(this.bookingCartReflect.HOOKS.BOOKING_CART);\n      this.currBookingItem$ = this.bookingCart$.pipe(map(bookingCart => {\n        var _a;\n\n        return bookingCart && bookingCart.currIndex != undefined && !isNaN(bookingCart.currIndex) ? (_a = bookingCart.bookingItems) === null || _a === void 0 ? void 0 : _a[bookingCart.currIndex] : undefined;\n      }));\n      this.bookingCart$.pipe(tap(val => this.bookingCartValue = val)).subscribe();\n      this.currBookingItem$.pipe(tap(val => this.currBookingItemValue = val)).subscribe();\n      this.unsetPGLoaderFlag();\n    }\n\n    initializeNewBooking(bookingItem) {\n      var _a, _b, _c, _d;\n\n      let bookingItems = ((_a = this.bookingCartValue) === null || _a === void 0 ? void 0 : _a.bookingItems) ? [...((_b = this.bookingCartValue) === null || _b === void 0 ? void 0 : _b.bookingItems)] : [];\n      let bookingCart = {\n        bookingItems: [...bookingItems, bookingItem],\n        currIndex: ((_d = (_c = this.bookingCartValue) === null || _c === void 0 ? void 0 : _c.bookingItems) === null || _d === void 0 ? void 0 : _d.length) || 0\n      };\n      this.bookingCartReflect.set(this.bookingCartReflect.HOOKS.BOOKING_CART, bookingCart);\n      this.router.navigate(['/book']);\n    }\n\n    navigateToBookingWithoutSpecifyingIndex() {\n      var _a, _b;\n\n      if (((_a = this.bookingCartValue.bookingItems) === null || _a === void 0 ? void 0 : _a.length) && ((_b = this.bookingCartValue.bookingItems) === null || _b === void 0 ? void 0 : _b.length) > 1) {\n        let bookingCart = Object.assign(Object.assign({}, this.bookingCartValue), {\n          currIndex: undefined\n        });\n        this.bookingCartReflect.set(this.bookingCartReflect.HOOKS.BOOKING_CART, bookingCart);\n      }\n\n      this.router.navigate(['/book']);\n    }\n\n    getTotalAmount(checkIn, checkOut, room) {\n      let diff = this.getNoOfDays(checkIn, checkOut);\n      let price = (room.price.discounted ? room.price.discounted : room.price.actual) + room.price.taxValue;\n      return diff * price;\n    }\n\n    getNoOfDays(checkIn, checkOut) {\n      let startDate = moment(checkIn, 'DD.MM.YYYY');\n      let endDate = moment(checkOut, 'DD.MM.YYYY');\n      return endDate.diff(startDate, 'days');\n    }\n\n    getAgesOfChildrenArray(paxInfo) {\n      let agesArray = [];\n      paxInfo.forEach((e1, index) => {\n        if (index > 1) {\n          agesArray.push(parseInt(e1));\n        }\n      });\n      return agesArray;\n    }\n\n    startNewBooking(property, selectedRoom, searchId, checkIn, checkOut, paxInfo) {\n      var _a, _b;\n\n      let room = {\n        ratePlanId: selectedRoom.ratePlanId,\n        roomId: selectedRoom.roomId,\n        price: {\n          actual: selectedRoom.price.actual,\n          discounted: selectedRoom.price.discounted,\n          taxValue: selectedRoom.price.taxValue\n        }\n      };\n      let bookingItem = {\n        searchId: searchId,\n        hotelId: property.hotel_id,\n        cityId: property.address.cityId,\n        checkIn: checkIn,\n        checkOut: checkOut,\n        noOfRooms: 1,\n        noOfAdults: parseInt((_a = paxInfo.split('|')[0]) !== null && _a !== void 0 ? _a : 1),\n        noOfChildren: parseInt((_b = paxInfo.split('|')[1]) !== null && _b !== void 0 ? _b : 0),\n        paxInfo: paxInfo,\n        agesOfChildren: this.getAgesOfChildrenArray(paxInfo.split('|')),\n        rooms: [room],\n        noOfDays: this.getNoOfDays(checkIn, checkOut),\n        totalAmount: this.getTotalAmount(checkIn, checkOut, selectedRoom),\n        renderData: Object.assign(Object.assign({}, property), {\n          rooms: [selectedRoom]\n        })\n      };\n      this.initializeNewBooking(bookingItem);\n    }\n\n    proceedBookingFromOngoingList(index) {\n      let bookingCart = Object.assign(Object.assign({}, this.bookingCartValue), {\n        currIndex: index\n      });\n      this.bookingCartReflect.set(this.bookingCartReflect.HOOKS.BOOKING_CART, bookingCart);\n    }\n\n    removeCurrentBookingItemFromList() {\n      let index = this.bookingCartValue.currIndex;\n\n      if (index != undefined && index != null) {\n        let bookingCart = cloneDeep(this.bookingCartValue);\n        bookingCart.bookingItems.splice(index, 1);\n        bookingCart.currIndex = undefined;\n        this.bookingCartReflect.set(this.bookingCartReflect.HOOKS.BOOKING_CART, bookingCart);\n      }\n    } //\n    // Addons\n    //\n\n\n    getAddons(searchParams) {\n      return this.http.get(`${BASE_URL}api/be/getPolicies`, {\n        params: searchParams,\n        headers: getDefaultHeaders()\n      });\n    }\n\n    addAddon(addon) {\n      var _a;\n\n      let bookingItem = this.currBookingItemValue;\n\n      if (bookingItem) {\n        let addonFound;\n\n        if (bookingItem.addons) {\n          for (let index = 0; index < ((_a = bookingItem.addons) === null || _a === void 0 ? void 0 : _a.length) || 0; index++) {\n            if (addon['policy_id'] === bookingItem.addons[index]['policy_id']) {\n              bookingItem.addons[index]['qty'] += 1;\n              addonFound = true;\n              break;\n            }\n          }\n        }\n\n        if (!addonFound) {\n          addon.qty = 1;\n\n          if (!bookingItem.addons) {\n            bookingItem.addons = [];\n          }\n\n          bookingItem.addons.push(addon);\n        }\n\n        let bookingCart = this.bookingCartValue;\n\n        if (this.bookingCartValue.currIndex) {\n          bookingCart.bookingItems[this.bookingCartValue.currIndex] = bookingItem;\n        }\n\n        this.bookingCartReflect.set(this.bookingCartReflect.HOOKS.BOOKING_CART, bookingCart);\n      }\n    }\n\n    removeAddon(addon) {\n      var _a;\n\n      let bookingItem = this.currBookingItemValue;\n\n      if (bookingItem) {\n        if (bookingItem.addons) {\n          for (let index = 0; index < ((_a = bookingItem === null || bookingItem === void 0 ? void 0 : bookingItem.addons) === null || _a === void 0 ? void 0 : _a.length); index++) {\n            if (addon['policy_id'] === (bookingItem === null || bookingItem === void 0 ? void 0 : bookingItem.addons[index]['policy_id'])) {\n              if (bookingItem.addons[index].qty > 1) {\n                bookingItem.addons[index].qty -= 1;\n              } else if (bookingItem.addons[index].qty === 1) {\n                bookingItem === null || bookingItem === void 0 ? void 0 : bookingItem.addons.splice(index, 1);\n              }\n\n              break;\n            }\n          }\n        }\n\n        let bookingCart = this.bookingCartValue;\n\n        if (this.bookingCartValue.currIndex) {\n          bookingCart.bookingItems[this.bookingCartValue.currIndex] = bookingItem;\n        }\n\n        this.bookingCartReflect.set(this.bookingCartReflect.HOOKS.BOOKING_CART, bookingCart);\n      }\n    }\n\n    getRecommendationsSearchParams() {\n      let bookingItem = this.currBookingItemValue;\n      let searchParams = {\n        bookingEngineId: BOOKING_ENGINE_ID\n      };\n      searchParams.cityId = bookingItem === null || bookingItem === void 0 ? void 0 : bookingItem.renderData.address.cityId;\n      searchParams.stateId = bookingItem === null || bookingItem === void 0 ? void 0 : bookingItem.renderData.address.stateId;\n      searchParams.countryId = bookingItem === null || bookingItem === void 0 ? void 0 : bookingItem.renderData.address.countryId;\n      searchParams.checkIn = bookingItem === null || bookingItem === void 0 ? void 0 : bookingItem.checkOut;\n      let checkOut = moment(bookingItem === null || bookingItem === void 0 ? void 0 : bookingItem.checkOut, \"DD-MM-YYYY\");\n      checkOut.add(2, 'days');\n      searchParams.checkOut = checkOut.format('DD/MM/YYYY');\n      searchParams.paxInfo = bookingItem === null || bookingItem === void 0 ? void 0 : bookingItem.paxInfo;\n      return searchParams;\n    } // PG Loader\n\n\n    setPGLoaderFlag() {\n      let bookingCart = Object.assign(Object.assign({}, this.bookingCartValue), {\n        loadingPaymentGateway: true\n      });\n      this.bookingCartReflect.set(this.bookingCartReflect.HOOKS.BOOKING_CART, bookingCart);\n      setTimeout(() => {\n        this.unsetPGLoaderFlag();\n      }, 10000);\n    }\n\n    unsetPGLoaderFlag() {\n      let bookingCart = Object.assign(Object.assign({}, this.bookingCartValue), {\n        loadingPaymentGateway: false\n      });\n      this.bookingCartReflect.set(this.bookingCartReflect.HOOKS.BOOKING_CART, bookingCart);\n    }\n\n  }\n\n  BookingService.ɵfac = function BookingService_Factory(t) {\n    return new (t || BookingService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Reflector), i0.ɵɵinject(i3.Router));\n  };\n\n  BookingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookingService,\n    factory: BookingService.ɵfac,\n    providedIn: 'root'\n  });\n  return BookingService;\n})();","map":null,"metadata":{},"sourceType":"module"}